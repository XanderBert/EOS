name: CMake Build Test

on: [push, pull_request]

jobs:
  linux-builds:
    name: Linux (${{ matrix.display_server }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        display_server: [Wayland, X11]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vulkan SDK
      run: |
        # Download and extract Vulkan SDK
        wget -qO- https://sdk.lunarg.com/sdk/download/latest/linux/vulkan-sdk.tar.gz | tar -xz
        VULKAN_SDK_PATH="$PWD/$(ls -d vulkan-sdk-* | head -n1)"
        echo "VULKAN_SDK=$VULKAN_SDK_PATH" >> $GITHUB_ENV
        echo "$VULKAN_SDK_PATH/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        if [ "${{ matrix.display_server }}" = "Wayland" ]; then
          sudo apt-get install -y libwayland-dev wayland-protocols libxkbcommon-dev
        else
          sudo apt-get install -y xorg-dev
        fi

    - name: Set Wayland environment variable
      if: matrix.display_server == 'Wayland'
      run: echo "WAYLAND_DISPLAY=wayland-0" >> $GITHUB_ENV

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure

  windows-build:
    name: Windows
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Vulkan SDK
      run: |
        choco install vulkan-sdk -y --version=1.3.275.0
        $vulkanPath = "C:\VulkanSDK\1.3.275.0"
        echo "VULKAN_SDK=$vulkanPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "$vulkanPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cd build
        cmake --build . --config Release

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
